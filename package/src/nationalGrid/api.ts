// tslint:disable
/**
 * National Grid
 * This is Rocketmakers implementation of the National Grid API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@rocketmakers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface Factors
 */
export interface Factors {
    /**
     * 
     * @type {Array<FactorsObject>}
     * @memberof Factors
     */
    data: Array<FactorsObject>;
}
/**
 * 
 * @export
 * @interface FactorsObject
 */
export interface FactorsObject {
    /**
     * Carbon intensity factor of average biomass power plants in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Biomass: number;
    /**
     * Carbon intensity factor of average coal power plants in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Coal: number;
    /**
     * Carbon intensity factor of average long-term Dutch imports in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Dutch_Imports: number;
    /**
     * Carbon intensity factor of average long-term French imports in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    French_Imports: number;
    /**
     * Carbon intensity factor of average CCGT power plants in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Gas__Combined_Cycle: number;
    /**
     * Carbon intensity factor of average OCGT power plants in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Gas__Open_Cycle: number;
    /**
     * Carbon intensity factor of hydro in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Hydro: number;
    /**
     * Carbon intensity factor of average long-term Irish imports in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Irish_Imports: number;
    /**
     * Carbon intensity factor of nuclear in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Nuclear: number;
    /**
     * Carbon intensity factor of oil power in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Oil: number;
    /**
     * Carbon intensity factor of power plants categorised as other in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Other: number;
    /**
     * Carbon intensity factor of pumped hydro-electric storage in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Pumped_Storage: number;
    /**
     * Carbon intensity factor of solar in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Solar: number;
    /**
     * Carbon intensity factor of wind in gCO2/kWh.
     * @type {number}
     * @memberof FactorsObject
     */
    Wind: number;
}
/**
 * 
 * @export
 * @interface FuelTypesObject
 */
export interface FuelTypesObject {
    /**
     * Name of fuel type.
     * @type {string}
     * @memberof FuelTypesObject
     */
    fuel: string;
    /**
     * Generation output of fuel type as a percentage of total generation.
     * @type {string}
     * @memberof FuelTypesObject
     */
    perc: string;
}
/**
 * 
 * @export
 * @interface GenerationDataArray
 */
export interface GenerationDataArray {
    /**
     * 
     * @type {Array<GenerationObject>}
     * @memberof GenerationDataArray
     */
    data: Array<GenerationObject>;
}
/**
 * 
 * @export
 * @interface GenerationDataObject
 */
export interface GenerationDataObject {
    /**
     * 
     * @type {GenerationObject}
     * @memberof GenerationDataObject
     */
    data: GenerationObject;
}
/**
 * 
 * @export
 * @interface GenerationObject
 */
export interface GenerationObject {
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof GenerationObject
     */
    from: string;
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof GenerationObject
     */
    to: string;
    /**
     * Fuel types
     * @type {Array<FuelTypesObject>}
     * @memberof GenerationObject
     */
    generationmix: Array<FuelTypesObject>;
}
/**
 * 
 * @export
 * @interface Intensity
 */
export interface Intensity {
    /**
     * 
     * @type {Array<IntensityObject>}
     * @memberof Intensity
     */
    data: Array<IntensityObject>;
}
/**
 * 
 * @export
 * @interface IntensityObject
 */
export interface IntensityObject {
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof IntensityObject
     */
    from: string;
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof IntensityObject
     */
    to: string;
    /**
     * 
     * @type {IntensityObjectIntensity}
     * @memberof IntensityObject
     */
    intensity: IntensityObjectIntensity;
}
/**
 * Carbon Intensity data (forecast, actual, index).
 * @export
 * @interface IntensityObjectIntensity
 */
export interface IntensityObjectIntensity {
    /**
     * The forecast Carbon Intensity for the half hour in units gCO2/kWh.
     * @type {number}
     * @memberof IntensityObjectIntensity
     */
    forecast: number;
    /**
     * The estimated actual Carbon Intensity for the half hour in units gCO2/kWh.
     * @type {number}
     * @memberof IntensityObjectIntensity
     */
    actual: number;
    /**
     * The index is a measure of the Carbon Intensity represented on a scale between \'very low\', \'low\', \'moderate\', \'high\', \'very high\'.
     * @type {string}
     * @memberof IntensityObjectIntensity
     */
    index: IntensityObjectIntensityIndexEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum IntensityObjectIntensityIndexEnum {
    VeryLow = 'very low',
    Low = 'low',
    Moderate = 'moderate',
    High = 'high',
    VeryHigh = 'very high'
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorError}
     * @memberof ModelError
     */
    error?: ErrorError;
}
/**
 * 
 * @export
 * @interface RegionalFromTo
 */
export interface RegionalFromTo {
    /**
     * 
     * @type {Array<RegionalFromToObject>}
     * @memberof RegionalFromTo
     */
    data: Array<RegionalFromToObject>;
}
/**
 * 
 * @export
 * @interface RegionalFromToObject
 */
export interface RegionalFromToObject {
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof RegionalFromToObject
     */
    from: string;
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof RegionalFromToObject
     */
    to: string;
    /**
     * 
     * @type {Array<RegionsObject>}
     * @memberof RegionalFromToObject
     */
    regions: Array<RegionsObject>;
}
/**
 * 
 * @export
 * @interface RegionalIDDataArray
 */
export interface RegionalIDDataArray {
    /**
     * 
     * @type {Array<RegionalIDObject>}
     * @memberof RegionalIDDataArray
     */
    data: Array<RegionalIDObject>;
}
/**
 * 
 * @export
 * @interface RegionalIDDataObject
 */
export interface RegionalIDDataObject {
    /**
     * 
     * @type {RegionalIDObject}
     * @memberof RegionalIDDataObject
     */
    data: RegionalIDObject;
}
/**
 * 
 * @export
 * @interface RegionalIDObject
 */
export interface RegionalIDObject {
    /**
     * Region ID 1-17.
     * @type {number}
     * @memberof RegionalIDObject
     */
    regionid: number;
    /**
     * Name of Distribution Network Operator (DNO) in region.
     * @type {string}
     * @memberof RegionalIDObject
     */
    dnoregion: string;
    /**
     * Name of region.
     * @type {string}
     * @memberof RegionalIDObject
     */
    shortname?: string;
    /**
     * Outward postcode i.e. RG10.
     * @type {string}
     * @memberof RegionalIDObject
     */
    postcode: string;
    /**
     * GB regions (regionid, dnoregion, shortname, intensity).
     * @type {object}
     * @memberof RegionalIDObject
     */
    data: object;
}
/**
 * 
 * @export
 * @interface RegionsObject
 */
export interface RegionsObject {
    /**
     * Region ID 1-17.
     * @type {number}
     * @memberof RegionsObject
     */
    regionid: number;
    /**
     * Name of Distribution Network Operator (DNO) in region.
     * @type {string}
     * @memberof RegionsObject
     */
    dnoregion: string;
    /**
     * Name of region.
     * @type {string}
     * @memberof RegionsObject
     */
    shortname: string;
    /**
     * Outward postcode i.e. RG10.
     * @type {string}
     * @memberof RegionsObject
     */
    postcode: string;
    /**
     * 
     * @type {RegionsObjectIntensity}
     * @memberof RegionsObject
     */
    intensity: RegionsObjectIntensity;
    /**
     * Fuel types
     * @type {Array<FuelTypesObject>}
     * @memberof RegionsObject
     */
    generationmix: Array<FuelTypesObject>;
}
/**
 * 
 * @export
 * @interface RegionsObjectIntensity
 */
export interface RegionsObjectIntensity {
    /**
     * The forecast Carbon Intensity for the half hour in units gCO2/kWh.
     * @type {string}
     * @memberof RegionsObjectIntensity
     */
    forecast: string;
    /**
     * The index is a measure of the Carbon Intensity represented on a scale between \'very low\', \'low\', \'moderate\', \'high\', \'very high\'.
     * @type {string}
     * @memberof RegionsObjectIntensity
     */
    index: RegionsObjectIntensityIndexEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RegionsObjectIntensityIndexEnum {
    VeryLow = 'very low',
    Low = 'low',
    Moderate = 'moderate',
    High = 'high',
    VeryHigh = 'very high'
}

/**
 * 
 * @export
 * @interface Statistics
 */
export interface Statistics {
    /**
     * 
     * @type {Array<StatisticsObject>}
     * @memberof Statistics
     */
    data: Array<StatisticsObject>;
}
/**
 * 
 * @export
 * @interface StatisticsObject
 */
export interface StatisticsObject {
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof StatisticsObject
     */
    from: string;
    /**
     * Datetime in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z. All times provided in UTC (+00:00).
     * @type {string}
     * @memberof StatisticsObject
     */
    to: string;
    /**
     * 
     * @type {StatisticsObjectIntensity}
     * @memberof StatisticsObject
     */
    intensity: StatisticsObjectIntensity;
}
/**
 * Carbon Intensity statistics (max, average, min, index).
 * @export
 * @interface StatisticsObjectIntensity
 */
export interface StatisticsObjectIntensity {
    /**
     * The maximum Carbon Intensity for the datetime range in units gCO2/kWh. Future periods use forecast data. Past data uses actual data.
     * @type {number}
     * @memberof StatisticsObjectIntensity
     */
    max: number;
    /**
     * The average Carbon Intensity for the datetime range in units gCO2/kWh. Future periods use forecast data. Past data uses actual data.
     * @type {number}
     * @memberof StatisticsObjectIntensity
     */
    average: number;
    /**
     * The maximum Carbon Intensity for the datetime range in units gCO2/kWh. Future periods use forecast data. Past data uses actual data.
     * @type {number}
     * @memberof StatisticsObjectIntensity
     */
    min: number;
    /**
     * The index is a measure of the Carbon Intensity represented on a scale between \'very low\', \'low\', \'moderate\', \'high\', \'very high\'.
     * @type {string}
     * @memberof StatisticsObjectIntensity
     */
    index: StatisticsObjectIntensityIndexEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum StatisticsObjectIntensityIndexEnum {
    VeryLow = 'very low',
    Low = 'low',
    Moderate = 'moderate',
    High = 'high',
    VeryHigh = 'very high'
}


/**
 * CarbonIntensityNationalApi - axios parameter creator
 * @export
 */
export const CarbonIntensityNationalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Carbon Intensity data for a specific date. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific date
         * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityDateDateGet: async (date: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling intensityDateDateGet.');
            }
            const localVarPath = `/intensity/date/{date}`
                .replace(`{${"date"}}`, String(date));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data for a specific date and half hour settlement period. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific date and period
         * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
         * @param {string} period Half hour settlement period between 1-48 e.g. 42
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityDateDatePeriodGet: async (date: string, period: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling intensityDateDatePeriodGet.');
            }
            // verify required parameter 'period' is not null or undefined
            if (period === null || period === undefined) {
                throw new RequiredError('period','Required parameter period was null or undefined when calling intensityDateDatePeriodGet.');
            }
            const localVarPath = `/intensity/date/{date}/{period}`
                .replace(`{${"date"}}`, String(date))
                .replace(`{${"period"}}`, String(period));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data for today. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for today
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityDateGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/intensity/date`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity factors for each fuel type.
         * @summary Get Carbon Intensity factors for each fuel type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFactorsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/intensity/factors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 24hrs after. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 24hrs forwards from specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromFw24hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityFromFw24hGet.');
            }
            const localVarPath = `/intensity/{from}/fw24h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 48hrs after. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 48hrs forwards from specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromFw48hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityFromFw48hGet.');
            }
            const localVarPath = `/intensity/{from}/fw48h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data for specific half hour period. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific half hour period
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityFromGet.');
            }
            const localVarPath = `/intensity/{from}`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 24hrs before. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 24hrs in the past of a specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromPt24hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityFromPt24hGet.');
            }
            const localVarPath = `/intensity/{from}/pt24h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data between the {from} and {to} datetimes. The maximum date range is limited to 14 days. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromToGet: async (from: string, to: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityFromToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling intensityFromToGet.');
            }
            const localVarPath = `/intensity/{from}/{to}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/intensity`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarbonIntensityNationalApi - functional programming interface
 * @export
 */
export const CarbonIntensityNationalApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Carbon Intensity data for a specific date. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific date
         * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityDateDateGet(date: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityDateDateGet(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data for a specific date and half hour settlement period. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific date and period
         * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
         * @param {string} period Half hour settlement period between 1-48 e.g. 42
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityDateDatePeriodGet(date: string, period: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityDateDatePeriodGet(date, period, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data for today. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for today
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityDateGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityDateGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity factors for each fuel type.
         * @summary Get Carbon Intensity factors for each fuel type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityFactorsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Factors>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityFactorsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 24hrs after. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 24hrs forwards from specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityFromFw24hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityFromFw24hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 48hrs after. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 48hrs forwards from specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityFromFw48hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityFromFw48hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data for specific half hour period. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific half hour period
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityFromGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityFromGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 24hrs before. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 24hrs in the past of a specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityFromPt24hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityFromPt24hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data between the {from} and {to} datetimes. The maximum date range is limited to 14 days. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityFromToGet(from: string, to: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityFromToGet(from, to, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Intensity>> {
            const localVarAxiosArgs = await CarbonIntensityNationalApiAxiosParamCreator(configuration).intensityGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CarbonIntensityNationalApi - factory interface
 * @export
 */
export const CarbonIntensityNationalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get Carbon Intensity data for a specific date. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific date
         * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityDateDateGet(date: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityDateDateGet(date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data for a specific date and half hour settlement period. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific date and period
         * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
         * @param {string} period Half hour settlement period between 1-48 e.g. 42
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityDateDatePeriodGet(date: string, period: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityDateDatePeriodGet(date, period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data for today. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for today
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityDateGet(options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityDateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity factors for each fuel type.
         * @summary Get Carbon Intensity factors for each fuel type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFactorsGet(options?: any): AxiosPromise<Factors> {
            return CarbonIntensityNationalApiFp(configuration).intensityFactorsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 24hrs after. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 24hrs forwards from specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromFw24hGet(from: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityFromFw24hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 48hrs after. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 48hrs forwards from specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromFw48hGet(from: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityFromFw48hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data for specific half hour period. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for specific half hour period
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromGet(from: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityFromGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data between the {from} datetime specified and 24hrs before. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data 24hrs in the past of a specific datetime
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromPt24hGet(from: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityFromPt24hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data between the {from} and {to} datetimes. The maximum date range is limited to 14 days. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityFromToGet(from: string, to: string, options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityFromToGet(from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityGet(options?: any): AxiosPromise<Intensity> {
            return CarbonIntensityNationalApiFp(configuration).intensityGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarbonIntensityNationalApi - interface
 * @export
 * @interface CarbonIntensityNationalApi
 */
export interface CarbonIntensityNationalApiInterface {
    /**
     * Get Carbon Intensity data for a specific date. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for specific date
     * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityDateDateGet(date: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data for a specific date and half hour settlement period. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for specific date and period
     * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
     * @param {string} period Half hour settlement period between 1-48 e.g. 42
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityDateDatePeriodGet(date: string, period: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data for today. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for today
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityDateGet(options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity factors for each fuel type.
     * @summary Get Carbon Intensity factors for each fuel type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityFactorsGet(options?: any): AxiosPromise<Factors>;

    /**
     * Get Carbon Intensity data between the {from} datetime specified and 24hrs after. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data 24hrs forwards from specific datetime
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityFromFw24hGet(from: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data between the {from} datetime specified and 48hrs after. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data 48hrs forwards from specific datetime
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityFromFw48hGet(from: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data for specific half hour period. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for specific half hour period
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityFromGet(from: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data between the {from} datetime specified and 24hrs before. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data 24hrs in the past of a specific datetime
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityFromPt24hGet(from: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data between the {from} and {to} datetimes. The maximum date range is limited to 14 days. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data between from and to datetime
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityFromToGet(from: string, to: string, options?: any): AxiosPromise<Intensity>;

    /**
     * Get Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApiInterface
     */
    intensityGet(options?: any): AxiosPromise<Intensity>;

}

/**
 * CarbonIntensityNationalApi - object-oriented interface
 * @export
 * @class CarbonIntensityNationalApi
 * @extends {BaseAPI}
 */
export class CarbonIntensityNationalApi extends BaseAPI implements CarbonIntensityNationalApiInterface {
    /**
     * Get Carbon Intensity data for a specific date. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for specific date
     * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityDateDateGet(date: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityDateDateGet(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data for a specific date and half hour settlement period. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for specific date and period
     * @param {string} date Date in YYYY-MM-DD format e.g. 2017-08-25
     * @param {string} period Half hour settlement period between 1-48 e.g. 42
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityDateDatePeriodGet(date: string, period: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityDateDatePeriodGet(date, period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data for today. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for today
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityDateGet(options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityDateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity factors for each fuel type.
     * @summary Get Carbon Intensity factors for each fuel type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityFactorsGet(options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityFactorsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data between the {from} datetime specified and 24hrs after. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data 24hrs forwards from specific datetime
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityFromFw24hGet(from: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityFromFw24hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data between the {from} datetime specified and 48hrs after. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data 48hrs forwards from specific datetime
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityFromFw48hGet(from: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityFromFw48hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data for specific half hour period. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for specific half hour period
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityFromGet(from: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityFromGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data between the {from} datetime specified and 24hrs before. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data 24hrs in the past of a specific datetime
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityFromPt24hGet(from: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityFromPt24hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data between the {from} and {to} datetimes. The maximum date range is limited to 14 days. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data between from and to datetime
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityFromToGet(from: string, to: string, options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityFromToGet(from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityNationalApi
     */
    public intensityGet(options?: any) {
        return CarbonIntensityNationalApiFp(this.configuration).intensityGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CarbonIntensityRegionalBetaApi - axios parameter creator
 * @export
 */
export const CarbonIntensityRegionalBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for England
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalEnglandGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/regional/england`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for GB regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/regional`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw24hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromFw24hGet.');
            }
            const localVarPath = `/regional/intensity/{from}/fw24h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw24hPostcodePostcodeGet: async (from: string, postcode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromFw24hPostcodePostcodeGet.');
            }
            // verify required parameter 'postcode' is not null or undefined
            if (postcode === null || postcode === undefined) {
                throw new RequiredError('postcode','Required parameter postcode was null or undefined when calling regionalIntensityFromFw24hPostcodePostcodeGet.');
            }
            const localVarPath = `/regional/intensity/{from}/fw24h/postcode/{postcode}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"postcode"}}`, String(postcode));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw24hRegionidRegionidGet: async (from: string, regionid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromFw24hRegionidRegionidGet.');
            }
            // verify required parameter 'regionid' is not null or undefined
            if (regionid === null || regionid === undefined) {
                throw new RequiredError('regionid','Required parameter regionid was null or undefined when calling regionalIntensityFromFw24hRegionidRegionidGet.');
            }
            const localVarPath = `/regional/intensity/{from}/fw24h/regionid/{regionid}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"regionid"}}`, String(regionid));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw48hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromFw48hGet.');
            }
            const localVarPath = `/regional/intensity/{from}/fw48h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw48hPostcodePostcodeGet: async (from: string, postcode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromFw48hPostcodePostcodeGet.');
            }
            // verify required parameter 'postcode' is not null or undefined
            if (postcode === null || postcode === undefined) {
                throw new RequiredError('postcode','Required parameter postcode was null or undefined when calling regionalIntensityFromFw48hPostcodePostcodeGet.');
            }
            const localVarPath = `/regional/intensity/{from}/fw48h/postcode/{postcode}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"postcode"}}`, String(postcode));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 48h for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for specified region
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw48hRegionidRegionidGet: async (from: string, regionid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromFw48hRegionidRegionidGet.');
            }
            // verify required parameter 'regionid' is not null or undefined
            if (regionid === null || regionid === undefined) {
                throw new RequiredError('regionid','Required parameter regionid was null or undefined when calling regionalIntensityFromFw48hRegionidRegionidGet.');
            }
            const localVarPath = `/regional/intensity/{from}/fw48h/regionid/{regionid}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"regionid"}}`, String(regionid));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for past 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromPt24hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromPt24hGet.');
            }
            const localVarPath = `/regional/intensity/{from}/pt24h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromPt24hPostcodePostcodeGet: async (from: string, postcode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromPt24hPostcodePostcodeGet.');
            }
            // verify required parameter 'postcode' is not null or undefined
            if (postcode === null || postcode === undefined) {
                throw new RequiredError('postcode','Required parameter postcode was null or undefined when calling regionalIntensityFromPt24hPostcodePostcodeGet.');
            }
            const localVarPath = `/regional/intensity/{from}/pt24h/postcode/{postcode}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"postcode"}}`, String(postcode));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromToGet: async (from: string, to: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling regionalIntensityFromToGet.');
            }
            const localVarPath = `/regional/intensity/{from}/{to}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data between specified datetimes for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between specified datetimes for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromToPostcodePostcodeGet: async (from: string, to: string, postcode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromToPostcodePostcodeGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling regionalIntensityFromToPostcodePostcodeGet.');
            }
            // verify required parameter 'postcode' is not null or undefined
            if (postcode === null || postcode === undefined) {
                throw new RequiredError('postcode','Required parameter postcode was null or undefined when calling regionalIntensityFromToPostcodePostcodeGet.');
            }
            const localVarPath = `/regional/intensity/{from}/{to}/postcode/{postcode}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to))
                .replace(`{${"postcode"}}`, String(postcode));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data between specified datetimes for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between specified datetimes for specified region
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromToRegionidRegionidGet: async (from: string, to: string, regionid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling regionalIntensityFromToRegionidRegionidGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling regionalIntensityFromToRegionidRegionidGet.');
            }
            // verify required parameter 'regionid' is not null or undefined
            if (regionid === null || regionid === undefined) {
                throw new RequiredError('regionid','Required parameter regionid was null or undefined when calling regionalIntensityFromToRegionidRegionidGet.');
            }
            const localVarPath = `/regional/intensity/{from}/{to}/regionid/{regionid}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to))
                .replace(`{${"regionid"}}`, String(regionid));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for current half hour for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for specified postcode
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalPostcodePostcodeGet: async (postcode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcode' is not null or undefined
            if (postcode === null || postcode === undefined) {
                throw new RequiredError('postcode','Required parameter postcode was null or undefined when calling regionalPostcodePostcodeGet.');
            }
            const localVarPath = `/regional/postcode/{postcode}`
                .replace(`{${"postcode"}}`, String(postcode));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Regional Carbon Intensity data for current half hour for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for specified region
         * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalRegionidRegionidGet: async (regionid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionid' is not null or undefined
            if (regionid === null || regionid === undefined) {
                throw new RequiredError('regionid','Required parameter regionid was null or undefined when calling regionalRegionidRegionidGet.');
            }
            const localVarPath = `/regional/regionid/{regionid}`
                .replace(`{${"regionid"}}`, String(regionid));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data for current half hour for Scotland. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for Scotland
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalScotlandGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/regional/scotland`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for Wales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalWalesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/regional/wales`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarbonIntensityRegionalBetaApi - functional programming interface
 * @export
 */
export const CarbonIntensityRegionalBetaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for England
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalEnglandGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataArray>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalEnglandGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for GB regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalFromTo>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromFw24hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalFromTo>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromFw24hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromFw24hPostcodePostcodeGet(from: string, postcode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromFw24hPostcodePostcodeGet(from, postcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromFw24hRegionidRegionidGet(from: string, regionid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromFw24hRegionidRegionidGet(from, regionid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromFw48hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalFromTo>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromFw48hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromFw48hPostcodePostcodeGet(from: string, postcode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromFw48hPostcodePostcodeGet(from, postcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for next 48h for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for specified region
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromFw48hRegionidRegionidGet(from: string, regionid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromFw48hRegionidRegionidGet(from, regionid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for past 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromPt24hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalFromTo>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromPt24hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromPt24hPostcodePostcodeGet(from: string, postcode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromPt24hPostcodePostcodeGet(from, postcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromToGet(from: string, to: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalFromTo>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromToGet(from, to, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data between specified datetimes for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between specified datetimes for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromToPostcodePostcodeGet(from: string, to: string, postcode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromToPostcodePostcodeGet(from, to, postcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data between specified datetimes for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between specified datetimes for specified region
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalIntensityFromToRegionidRegionidGet(from: string, to: string, regionid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataObject>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalIntensityFromToRegionidRegionidGet(from, to, regionid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for current half hour for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for specified postcode
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalPostcodePostcodeGet(postcode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataArray>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalPostcodePostcodeGet(postcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Regional Carbon Intensity data for current half hour for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for specified region
         * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalRegionidRegionidGet(regionid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataArray>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalRegionidRegionidGet(regionid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data for current half hour for Scotland. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for Scotland
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalScotlandGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataArray>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalScotlandGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for Wales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionalWalesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionalIDDataArray>> {
            const localVarAxiosArgs = await CarbonIntensityRegionalBetaApiAxiosParamCreator(configuration).regionalWalesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CarbonIntensityRegionalBetaApi - factory interface
 * @export
 */
export const CarbonIntensityRegionalBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for England
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalEnglandGet(options?: any): AxiosPromise<RegionalIDDataArray> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalEnglandGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for GB regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalGet(options?: any): AxiosPromise<RegionalFromTo> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw24hGet(from: string, options?: any): AxiosPromise<RegionalFromTo> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromFw24hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw24hPostcodePostcodeGet(from: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromFw24hPostcodePostcodeGet(from, postcode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw24hRegionidRegionidGet(from: string, regionid: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromFw24hRegionidRegionidGet(from, regionid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw48hGet(from: string, options?: any): AxiosPromise<RegionalFromTo> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromFw48hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw48hPostcodePostcodeGet(from: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromFw48hPostcodePostcodeGet(from, postcode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for next 48h for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for next 48h for specified region
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromFw48hRegionidRegionidGet(from: string, regionid: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromFw48hRegionidRegionidGet(from, regionid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for past 24h. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for GB regions
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromPt24hGet(from: string, options?: any): AxiosPromise<RegionalFromTo> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromPt24hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromPt24hPostcodePostcodeGet(from: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromPt24hPostcodePostcodeGet(from, postcode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for past 24h for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromToGet(from: string, to: string, options?: any): AxiosPromise<RegionalFromTo> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromToGet(from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data between specified datetimes for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between specified datetimes for specified postcode
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromToPostcodePostcodeGet(from: string, to: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromToPostcodePostcodeGet(from, to, postcode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data between specified datetimes for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data between specified datetimes for specified region
         * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalIntensityFromToRegionidRegionidGet(from: string, to: string, regionid: string, options?: any): AxiosPromise<RegionalIDDataObject> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalIntensityFromToRegionidRegionidGet(from, to, regionid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for current half hour for specified postcode. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for specified postcode
         * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalPostcodePostcodeGet(postcode: string, options?: any): AxiosPromise<RegionalIDDataArray> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalPostcodePostcodeGet(postcode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Regional Carbon Intensity data for current half hour for specified region. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for specified region
         * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalRegionidRegionidGet(regionid: string, options?: any): AxiosPromise<RegionalIDDataArray> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalRegionidRegionidGet(regionid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data for current half hour for Scotland. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for Scotland
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalScotlandGet(options?: any): AxiosPromise<RegionalIDDataArray> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalScotlandGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity data for current half hour for Wales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionalWalesGet(options?: any): AxiosPromise<RegionalIDDataArray> {
            return CarbonIntensityRegionalBetaApiFp(configuration).regionalWalesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarbonIntensityRegionalBetaApi - interface
 * @export
 * @interface CarbonIntensityRegionalBetaApi
 */
export interface CarbonIntensityRegionalBetaApiInterface {
    /**
     * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for England
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalEnglandGet(options?: any): AxiosPromise<RegionalIDDataArray>;

    /**
     * Get Regional Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for GB regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalGet(options?: any): AxiosPromise<RegionalFromTo>;

    /**
     * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromFw24hGet(from: string, options?: any): AxiosPromise<RegionalFromTo>;

    /**
     * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromFw24hPostcodePostcodeGet(from: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromFw24hRegionidRegionidGet(from: string, regionid: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 48h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromFw48hGet(from: string, options?: any): AxiosPromise<RegionalFromTo>;

    /**
     * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 48h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromFw48hPostcodePostcodeGet(from: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data for next 48h for specified region. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 48h for specified region
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromFw48hRegionidRegionidGet(from: string, regionid: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data for past 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for past 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromPt24hGet(from: string, options?: any): AxiosPromise<RegionalFromTo>;

    /**
     * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for past 24h for specified postcode
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromPt24hPostcodePostcodeGet(from: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for past 24h for specified postcode
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromToGet(from: string, to: string, options?: any): AxiosPromise<RegionalFromTo>;

    /**
     * Get Regional Carbon Intensity data between specified datetimes for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data between specified datetimes for specified postcode
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromToPostcodePostcodeGet(from: string, to: string, postcode: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data between specified datetimes for specified region. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data between specified datetimes for specified region
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalIntensityFromToRegionidRegionidGet(from: string, to: string, regionid: string, options?: any): AxiosPromise<RegionalIDDataObject>;

    /**
     * Get Regional Carbon Intensity data for current half hour for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for specified postcode
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalPostcodePostcodeGet(postcode: string, options?: any): AxiosPromise<RegionalIDDataArray>;

    /**
     * Get Regional Carbon Intensity data for current half hour for specified region. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for specified region
     * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalRegionidRegionidGet(regionid: string, options?: any): AxiosPromise<RegionalIDDataArray>;

    /**
     * Get Carbon Intensity data for current half hour for Scotland. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for Scotland
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalScotlandGet(options?: any): AxiosPromise<RegionalIDDataArray>;

    /**
     * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for Wales
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApiInterface
     */
    regionalWalesGet(options?: any): AxiosPromise<RegionalIDDataArray>;

}

/**
 * CarbonIntensityRegionalBetaApi - object-oriented interface
 * @export
 * @class CarbonIntensityRegionalBetaApi
 * @extends {BaseAPI}
 */
export class CarbonIntensityRegionalBetaApi extends BaseAPI implements CarbonIntensityRegionalBetaApiInterface {
    /**
     * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for England
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalEnglandGet(options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalEnglandGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for current half hour. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for GB regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalGet(options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromFw24hGet(from: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromFw24hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromFw24hPostcodePostcodeGet(from: string, postcode: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromFw24hPostcodePostcodeGet(from, postcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for next 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromFw24hRegionidRegionidGet(from: string, regionid: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromFw24hRegionidRegionidGet(from, regionid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 48h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromFw48hGet(from: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromFw48hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for next 48h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 48h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromFw48hPostcodePostcodeGet(from: string, postcode: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromFw48hPostcodePostcodeGet(from, postcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for next 48h for specified region. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for next 48h for specified region
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} regionid Region ID of GB region. See list of Region IDs [here](https://carbon-intensity.github.io/api-definitions/?javascript--nodejs#region-list)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromFw48hRegionidRegionidGet(from: string, regionid: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromFw48hRegionidRegionidGet(from, regionid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for past 24h. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for past 24h for GB regions
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromPt24hGet(from: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromPt24hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for past 24h for specified postcode
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromPt24hPostcodePostcodeGet(from: string, postcode: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromPt24hPostcodePostcodeGet(from, postcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for past 24h for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for past 24h for specified postcode
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromToGet(from: string, to: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromToGet(from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data between specified datetimes for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data between specified datetimes for specified postcode
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromToPostcodePostcodeGet(from: string, to: string, postcode: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromToPostcodePostcodeGet(from, to, postcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data between specified datetimes for specified region. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data between specified datetimes for specified region
     * @param {string} from Datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalIntensityFromToRegionidRegionidGet(from: string, to: string, regionid: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalIntensityFromToRegionidRegionidGet(from, to, regionid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for current half hour for specified postcode. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for specified postcode
     * @param {string} postcode Outward postcode i.e. RG41 or SW1 or TF8. Do not include full postcode, outward postcode only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalPostcodePostcodeGet(postcode: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalPostcodePostcodeGet(postcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Regional Carbon Intensity data for current half hour for specified region. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for specified region
     * @param {string} regionid Region ID of GB region. See list of Region IDs (here)[https://carbon-intensity.github.io/api-definitions/#region-list]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalRegionidRegionidGet(regionid: string, options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalRegionidRegionidGet(regionid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data for current half hour for Scotland. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for Scotland
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalScotlandGet(options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalScotlandGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity data for current half hour for Wales. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity data for current half hour for Wales
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarbonIntensityRegionalBetaApi
     */
    public regionalWalesGet(options?: any) {
        return CarbonIntensityRegionalBetaApiFp(this.configuration).regionalWalesGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * GenerationMixNationalBetaApi - axios parameter creator
 * @export
 */
export const GenerationMixNationalBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get generation mix for the past 24 hours. All times provided in UTC (+00:00).
         * @summary Get generation mix for the past 24 hours
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationFromPt24hGet: async (from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling generationFromPt24hGet.');
            }
            const localVarPath = `/generation/{from}/pt24h`
                .replace(`{${"from"}}`, String(from));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get generation mix between from and to datetimes. All times provided in UTC (+00:00).
         * @summary Get generation mix between from and to datetimes
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationFromToGet: async (from: string, to: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling generationFromToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling generationFromToGet.');
            }
            const localVarPath = `/generation/{from}/{to}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get generation mix for current half hour. All times provided in UTC (+00:00).
         * @summary Get generation mix for current half hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/generation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenerationMixNationalBetaApi - functional programming interface
 * @export
 */
export const GenerationMixNationalBetaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get generation mix for the past 24 hours. All times provided in UTC (+00:00).
         * @summary Get generation mix for the past 24 hours
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generationFromPt24hGet(from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerationDataArray>> {
            const localVarAxiosArgs = await GenerationMixNationalBetaApiAxiosParamCreator(configuration).generationFromPt24hGet(from, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get generation mix between from and to datetimes. All times provided in UTC (+00:00).
         * @summary Get generation mix between from and to datetimes
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generationFromToGet(from: string, to: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerationDataArray>> {
            const localVarAxiosArgs = await GenerationMixNationalBetaApiAxiosParamCreator(configuration).generationFromToGet(from, to, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get generation mix for current half hour. All times provided in UTC (+00:00).
         * @summary Get generation mix for current half hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generationGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerationDataObject>> {
            const localVarAxiosArgs = await GenerationMixNationalBetaApiAxiosParamCreator(configuration).generationGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GenerationMixNationalBetaApi - factory interface
 * @export
 */
export const GenerationMixNationalBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get generation mix for the past 24 hours. All times provided in UTC (+00:00).
         * @summary Get generation mix for the past 24 hours
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationFromPt24hGet(from: string, options?: any): AxiosPromise<GenerationDataArray> {
            return GenerationMixNationalBetaApiFp(configuration).generationFromPt24hGet(from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get generation mix between from and to datetimes. All times provided in UTC (+00:00).
         * @summary Get generation mix between from and to datetimes
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationFromToGet(from: string, to: string, options?: any): AxiosPromise<GenerationDataArray> {
            return GenerationMixNationalBetaApiFp(configuration).generationFromToGet(from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get generation mix for current half hour. All times provided in UTC (+00:00).
         * @summary Get generation mix for current half hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationGet(options?: any): AxiosPromise<GenerationDataObject> {
            return GenerationMixNationalBetaApiFp(configuration).generationGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenerationMixNationalBetaApi - interface
 * @export
 * @interface GenerationMixNationalBetaApi
 */
export interface GenerationMixNationalBetaApiInterface {
    /**
     * Get generation mix for the past 24 hours. All times provided in UTC (+00:00).
     * @summary Get generation mix for the past 24 hours
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationMixNationalBetaApiInterface
     */
    generationFromPt24hGet(from: string, options?: any): AxiosPromise<GenerationDataArray>;

    /**
     * Get generation mix between from and to datetimes. All times provided in UTC (+00:00).
     * @summary Get generation mix between from and to datetimes
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationMixNationalBetaApiInterface
     */
    generationFromToGet(from: string, to: string, options?: any): AxiosPromise<GenerationDataArray>;

    /**
     * Get generation mix for current half hour. All times provided in UTC (+00:00).
     * @summary Get generation mix for current half hour
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationMixNationalBetaApiInterface
     */
    generationGet(options?: any): AxiosPromise<GenerationDataObject>;

}

/**
 * GenerationMixNationalBetaApi - object-oriented interface
 * @export
 * @class GenerationMixNationalBetaApi
 * @extends {BaseAPI}
 */
export class GenerationMixNationalBetaApi extends BaseAPI implements GenerationMixNationalBetaApiInterface {
    /**
     * Get generation mix for the past 24 hours. All times provided in UTC (+00:00).
     * @summary Get generation mix for the past 24 hours
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationMixNationalBetaApi
     */
    public generationFromPt24hGet(from: string, options?: any) {
        return GenerationMixNationalBetaApiFp(this.configuration).generationFromPt24hGet(from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get generation mix between from and to datetimes. All times provided in UTC (+00:00).
     * @summary Get generation mix between from and to datetimes
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationMixNationalBetaApi
     */
    public generationFromToGet(from: string, to: string, options?: any) {
        return GenerationMixNationalBetaApiFp(this.configuration).generationFromToGet(from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get generation mix for current half hour. All times provided in UTC (+00:00).
     * @summary Get generation mix for current half hour
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationMixNationalBetaApi
     */
    public generationGet(options?: any) {
        return GenerationMixNationalBetaApiFp(this.configuration).generationGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * StatisticsNationalApi - axios parameter creator
 * @export
 */
export const StatisticsNationalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get block average Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. The block length must be between 1 and 24 hours and should be an integer. All times provided in UTC (+00:00).
         * @summary Get block average Carbon Intensity statistics between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} block Block length in hours i.e. a block length of 2 hrs over a 24 hr period returns 12 items with the average, max, min for each 2 hr block e.g. 2017-08-26T17:00Z/2017-08-27T17:00Z/2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityStatsFromToBlockGet: async (from: string, to: string, block: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityStatsFromToBlockGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling intensityStatsFromToBlockGet.');
            }
            // verify required parameter 'block' is not null or undefined
            if (block === null || block === undefined) {
                throw new RequiredError('block','Required parameter block was null or undefined when calling intensityStatsFromToBlockGet.');
            }
            const localVarPath = `/intensity/stats/{from}/{to}/{block}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to))
                .replace(`{${"block"}}`, String(block));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity statistics between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityStatsFromToGet: async (from: string, to: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling intensityStatsFromToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling intensityStatsFromToGet.');
            }
            const localVarPath = `/intensity/stats/{from}/{to}`
                .replace(`{${"from"}}`, String(from))
                .replace(`{${"to"}}`, String(to));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsNationalApi - functional programming interface
 * @export
 */
export const StatisticsNationalApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get block average Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. The block length must be between 1 and 24 hours and should be an integer. All times provided in UTC (+00:00).
         * @summary Get block average Carbon Intensity statistics between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} block Block length in hours i.e. a block length of 2 hrs over a 24 hr period returns 12 items with the average, max, min for each 2 hr block e.g. 2017-08-26T17:00Z/2017-08-27T17:00Z/2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityStatsFromToBlockGet(from: string, to: string, block: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Statistics>> {
            const localVarAxiosArgs = await StatisticsNationalApiAxiosParamCreator(configuration).intensityStatsFromToBlockGet(from, to, block, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity statistics between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intensityStatsFromToGet(from: string, to: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Statistics>> {
            const localVarAxiosArgs = await StatisticsNationalApiAxiosParamCreator(configuration).intensityStatsFromToGet(from, to, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatisticsNationalApi - factory interface
 * @export
 */
export const StatisticsNationalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get block average Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. The block length must be between 1 and 24 hours and should be an integer. All times provided in UTC (+00:00).
         * @summary Get block average Carbon Intensity statistics between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} block Block length in hours i.e. a block length of 2 hrs over a 24 hr period returns 12 items with the average, max, min for each 2 hr block e.g. 2017-08-26T17:00Z/2017-08-27T17:00Z/2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityStatsFromToBlockGet(from: string, to: string, block: string, options?: any): AxiosPromise<Statistics> {
            return StatisticsNationalApiFp(configuration).intensityStatsFromToBlockGet(from, to, block, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. All times provided in UTC (+00:00).
         * @summary Get Carbon Intensity statistics between from and to datetime
         * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intensityStatsFromToGet(from: string, to: string, options?: any): AxiosPromise<Statistics> {
            return StatisticsNationalApiFp(configuration).intensityStatsFromToGet(from, to, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsNationalApi - interface
 * @export
 * @interface StatisticsNationalApi
 */
export interface StatisticsNationalApiInterface {
    /**
     * Get block average Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. The block length must be between 1 and 24 hours and should be an integer. All times provided in UTC (+00:00).
     * @summary Get block average Carbon Intensity statistics between from and to datetime
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} block Block length in hours i.e. a block length of 2 hrs over a 24 hr period returns 12 items with the average, max, min for each 2 hr block e.g. 2017-08-26T17:00Z/2017-08-27T17:00Z/2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsNationalApiInterface
     */
    intensityStatsFromToBlockGet(from: string, to: string, block: string, options?: any): AxiosPromise<Statistics>;

    /**
     * Get Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity statistics between from and to datetime
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsNationalApiInterface
     */
    intensityStatsFromToGet(from: string, to: string, options?: any): AxiosPromise<Statistics>;

}

/**
 * StatisticsNationalApi - object-oriented interface
 * @export
 * @class StatisticsNationalApi
 * @extends {BaseAPI}
 */
export class StatisticsNationalApi extends BaseAPI implements StatisticsNationalApiInterface {
    /**
     * Get block average Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. The block length must be between 1 and 24 hours and should be an integer. All times provided in UTC (+00:00).
     * @summary Get block average Carbon Intensity statistics between from and to datetime
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} block Block length in hours i.e. a block length of 2 hrs over a 24 hr period returns 12 items with the average, max, min for each 2 hr block e.g. 2017-08-26T17:00Z/2017-08-27T17:00Z/2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsNationalApi
     */
    public intensityStatsFromToBlockGet(from: string, to: string, block: string, options?: any) {
        return StatisticsNationalApiFp(this.configuration).intensityStatsFromToBlockGet(from, to, block, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Carbon Intensity statistics (average, max, mean) between from and to datetime. The maximum date range is limited to 30 days. All times provided in UTC (+00:00).
     * @summary Get Carbon Intensity statistics between from and to datetime
     * @param {string} from Start datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {string} to End datetime in in ISO8601 format YYYY-MM-DDThh:mmZ e.g. 2017-08-25T12:35Z
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsNationalApi
     */
    public intensityStatsFromToGet(from: string, to: string, options?: any) {
        return StatisticsNationalApiFp(this.configuration).intensityStatsFromToGet(from, to, options).then((request) => request(this.axios, this.basePath));
    }

}


